{
  "results": [
    {
      "url": "https://interviewing.io/guides/amazon-leadership-principles",
      "raw_content": "# A Senior Engineer's Guide to the Amazon Leadership Principles Interview\n\n## How to approach an Amazon Leadership Principles interview\n\n#### Table of Contents\n\n#### [Part 1: Amazon Leadership Principles Explained](#part_1)\n\n#### [Part 2: What to expect, what to avoid, and what to do during an Amazon Leadership Principles interview](#part_2)\n\n#### [Amazon Leadership Principles interview question examples](#lp_interview_question_examples)\n\n## Creating the Amazon Leadership Principles guide\n\n## About interviewing.io\n\n## How to use the Amazon Leadership Principles guide\n\n## Amazon Leadership Principles Explained\n\n## What Amazon Likes\n\n## What Amazon Dislikes\n\n## What are Amazon\u2019s Leadership Principles (LPs)?\n\n## In a nutshell, Leadership Principles (LPs) are the 16 values Amazon cares the most about.\n\n![Amazon's leadership principles](/static/images/AmazonLPS.svg)\n\n### 1. Customer Obsession\n\n### 2. Invent and Simplify\n\n### 3. Learn and Be Curious\n\n### 4. Insist on the Highest Standards\n\n### 5. Deliver Results\n\n### 6. Strive to be the Earth\u2019s Best Employer\n\n### 7. Dive Deep\n\n### 8. Have Backbone; Disagree and Commit\n\n### 9. Success and Scale Bring Broad Responsibility\n\n### 10. Ownership\n\n### 11. Are Right, A Lot\n\n### 12. Hire and Develop the Best\n\n### 13. Think Big\n\n### 14. Bias for Action\n\n### 15. Frugality\n\n### 16. Earn Trust\n\n## How to approach the Amazon Leadership Principles interview\n\n### Why interview preparation matters\n\n## High-level strategy to frame your Leadership Principles interview\n\n### The most common pitfall to avoid\n\n### Put Customer Obsession above all else\n\n## What to expect, what to avoid, and what to do during an Amazon Leadership Principles interview\n\n## What to expect when answering questions about Amazon Leadership Principles\n\n## Four common mistakes to avoid when answering Amazon interview questions\n\n## Most Common Mistakes in Terms of Content\n\n![The most common mistakes that Amazon interviewees make in terms of content](/static/images/CommonMistakes.svg)\n\n### Not enough impact or metrics\n\n### Falling down rabbit holes when asked about conflict\n\n### Not focusing on individual contribution\n\n### Saying Leadership Principles out loud\n\n## Not Ok\n\n## Ok\n\n## Tips for a successful Amazon behavioral interview\n\n### Beat the drum with customer obsession\u2014the most important Leadership Principle\n\n## ANSWER AWithout customer obsession framing\n\n## ANSWER AWith customer obsession framing\n\n### No answer is often better than a bad answer\n\n### The most misunderstood Amazon leadership principle\n\n### Follow four rules when speaking about conflict\n\n#### Clearly articulate the conflict in the first few seconds of your answer.\n\n#### Make sure the topic of a conflict is relevant to your level.\n\n#### Choose actual conflicts, not potential conflicts.\n\n## Example of a potential conflict that got resolved quickly\n\n## Example of an actual conflict\n\n#### Focus on what happened and stick to the facts.\n\n### Share experiences where you took a big loss\n\n### Questions the candidate asks the interviewer are an opportunity to show signal\n\n## How to practice for a Leadership Principles interview in six steps\n\n![Six steps to prepare for an Amazon Leadership Principles interview](/_next/image?url=%2Fstatic%2Fimages%2FSixSteps.png&w=1920&q=75)\n\n### 1 Extract the raw data\n\n### 2 Frame the data\n\n### 3 Iterate\n\n### 4 Refine the stuff that works\n\n### 5 Go from good to great\n\n### 6 Adopt the Amazon mindset\n\n## Amazon Leadership Principles interview question examples\n\n## Amazon Leadership Principles interview question examples\n\n## Bucket #1: Technical problem solving\n\n## Bucket #2: Learning (and failure)\n\n## Bucket #3: Getting stuff (for the business) done\n\n## Bucket #4: Interpersonal conflict\n\n## Bucket #5: Ambiguity\n\n#### Credits\n\n###### Creator and Contributing Author\n\n###### Core Consultants\n\n###### Editor\n\n###### Special thanks\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.\n\n![Google Icon](/static/images/icon--google-color.svg)\n![App screenshot](/_next/image?url=%2Fstatic%2Fimages%2FFooterImg.png&w=3840&q=75)\n![interviewing.io](/static/images/icon--linkedin-grey.svg)\n![interviewing.io](/static/images/icon--twitter.svg)\n![interviewing.io](/static/images/icon--youtube.svg)",
      "images": []
    },
    {
      "url": "https://interviewing.io/guides/system-design-interview",
      "raw_content": "System Design Interview Guide for Senior Engineers\n\nWe helped write the sequel to \"Cracking the Coding Interview\". [Read 9 chapters for free \u2192](https://bctci.co/free-chapters)\n\n[interviewing.io](/)\n\nOpen menu\n\nInterview resources\n\n- [For employers](https://interviewing.io/employers)\n- [Gift mock interviews](https://interviewing.io/gift-practice-interviews)\n- [Blog](https://interviewing.io/blog)\n- [FAQ](https://interviewing.io/faq)\n- [Log in](https://start.interviewing.io/login)\n[Give it a try](https://interviewing.io/signup)\n\n# A Senior Engineer's Guide to the System Design Interview\n\n## How To Prepare For a System Design Interview\n\nPart 1 is a ~20 minute read\n\n#### Table of Contents\n\n[What this guide is and whom it's for](/guides/system-design-interview#what-this-guide-is-and-whom-it-s-for)\n\n[How we made this guide](/guides/system-design-interview#how-we-made-this-guide)\n\n[How to use this guide](/guides/system-design-interview#how-to-use-this-guide)\n\n#### Part 1: How to approach a system design interview\n\n[Introduction to System Design](/guides/system-design-interview#introduction-to-system-design)\n\n[The difference between engineering problems and design problems](/guides/system-design-interview#the-difference-between-engineering-problems-and-design-problems)\n\n[How approaching a system design interview is different than a coding interview](/guides/system-design-interview#how-approaching-a-system-design-interview-is-different-than-a-coding-interview)\n\n[What it\u2019s like to walk into a system design interview](/guides/system-design-interview#what-it-s-like-to-walk-into-a-system-design-interview)\n\n[What your interviewer looks for, and what they don\u2019t](/guides/system-design-interview#what-your-interviewer-looks-for-and-what-they-don-t)\n\n[Green Flags, Red Flags, and other signposts](/guides/system-design-interview#green-flags-red-flags-and-other-signposts)\n\n#### Part 2: 15 fundamental system design concepts\n\n[Part 2 Introduction](/guides/system-design-interview/part-two#part-2-introduction)\n\n[About these 15 fundamental concepts](/guides/system-design-interview/part-two#about-these-15-fundamental-concepts)\n\n[One note about the 12 technical topics](/guides/system-design-interview/part-two#one-note-about-the-12-technical-topics)\n\n[Three core concepts for system design interviews](/guides/system-design-interview/part-two#three-core-concepts-for-system-design-interviews)[a. There\u2019s no right way to design a system](/guides/system-design-interview/part-two#a-there-s-no-right-way-to-design-a-system)[b. General rules of thumb](/guides/system-design-interview/part-two#b-general-rules-of-thumb)[c. Exactly what words to say in specific scenarios](/guides/system-design-interview/part-two#c-exactly-what-words-to-say-in-specific-scenarios)\n\n[12 fundamental (technical) system design concepts](/guides/system-design-interview/part-two#12-fundamental-technical-system-design-concepts)[a. APIs](/guides/system-design-interview/part-two#concepts-apis)[b. Databases (SQL vs NoSQL)](/guides/system-design-interview/part-two#concepts-databases)[c. Scaling](/guides/system-design-interview/part-two#concepts-scaling)[d. CAP Theorem](/guides/system-design-interview/part-two#concepts-cap)[e. Web authentication and basic security](/guides/system-design-interview/part-two#concepts-authentication)[f. Load balancers](/guides/system-design-interview/part-two#concepts-balancers)[g. Caching](/guides/system-design-interview/part-two#concepts-caching)[h. Message queues](/guides/system-design-interview/part-two#concepts-queues)[i. Indexing](/guides/system-design-interview/part-two#concepts-indexing)[j. Failover](/guides/system-design-interview/part-two#concepts-failovers)[k. Replication](/guides/system-design-interview/part-two#concepts-replication)[l. Consistent hashing](/guides/system-design-interview/part-two#concepts-hashing)[Part 2 Outro](/guides/system-design-interview/part-two#part-2-outro)\n\n#### Part 3: A 3-step framework to crush any system design interview\n\n[Part 3 Intro](/guides/system-design-interview/part-three#part-3-intro)\n\n[About this 3-step framework](/guides/system-design-interview/part-three#about-this-3-step-framework)[Fundamentals of this framework](/guides/system-design-interview/part-three#fundamentals-of-this-framework)[How to use this framework](/guides/system-design-interview/part-three#how-to-use-this-framework)[Limitations](/guides/system-design-interview/part-three#limitations)[Overview of the 3 steps](/guides/system-design-interview/part-three#overview-of-the-3-steps)\n\n[Step 1: Requirements](/guides/system-design-interview/part-three#step-1-requirements)[1.1 Functional Requirements](/guides/system-design-interview/part-three#1-1-functional-requirements)[1.2 Non-Functional Requirements](/guides/system-design-interview/part-three#1-2-non-functional-requirements)\n\n[Step 2: Data Types, API and Scale](/guides/system-design-interview/part-three#step-2-data-types-api-and-scale)[2.1 What data types does the system need to store?](/guides/system-design-interview/part-three#2-1-what-data-types-does-the-system-need-to-store)[2.2 What does the API look like?](/guides/system-design-interview/part-three#2-2-what-does-the-api-look-like)[2.3 What volume of requests do we need to support?](/guides/system-design-interview/part-three#2-3-what-volume-of-requests-do-we-need-to-support)\n\n[Step 3: Design](/guides/system-design-interview/part-three#step-3-design)[So what is \u201cdesign\u201d?](/guides/system-design-interview/part-three#so-what-is-design)[3.1 Data storage](/guides/system-design-interview/part-three#3-1-data-storage)[3.1.1 Relational vs. Non-Relational](/guides/system-design-interview/part-three#3-1-1-relational-vs-non-relational)[3.2 Microservices](/guides/system-design-interview/part-three#3-2-microservices)\n\n[End-to-end example of the process](/guides/system-design-interview/part-three#end-to-end-example-of-the-process)[Step 1: Requirements](/guides/system-design-interview/part-three#step-1-requirements)[Step 2: Data Types, API and Scale](/guides/system-design-interview/part-three#step-2-data-types-api-and-scale)[Step 3: Design](/guides/system-design-interview/part-three#step-3-design)\n\n[Part 3: Outro](/guides/system-design-interview/part-three#part-3-outro)\n\n#### Part 4: Watch us design simple systems from scratch, and learn how to get unstuck\n\n[About Part 4](/guides/system-design-interview/part-four#about-part-4)\n\n[Chapter One](/guides/system-design-interview/part-four#chapter-one)[For something large enough, let\u2019s look at TikTok and simplify it greatly. Here\u2019s one way to do it:](/guides/system-design-interview/part-four#for-something-large-enough-let-s-look-at-tik-tok-and-simplify-it-greatly-here-s-one-way-to-do-it)[Let\u2019s now look into Pastebin. It\u2019s probably the easiest one of all the above.](/guides/system-design-interview/part-four#let-s-now-look-into-pastebin-it-s-probably-the-easiest-one-of-all-the-above)\n\n[Chapter Two](/guides/system-design-interview/part-four#chapter-two)[Warm-up Problem One: Deduplication](/guides/system-design-interview/part-four#warm-up-problem-one-deduplication)[Warm-up Problem Two: The Enumeration Problem](/guides/system-design-interview/part-four#warm-up-problem-two-the-enumeration-problem)[Real problem: Unique ID Generation, aka the Key Generation Service\u00a0(KGS)](/guides/system-design-interview/part-four#real-problem-unique-id-generation-aka-the-key-generation-service-kgs)\n\n[Chapter Three](/guides/system-design-interview/part-four#chapter-three)[Design AOL Instant Messenger](/guides/system-design-interview/part-four#design-aol-instant-messenger)[Solution Design](/guides/system-design-interview/part-four#solution-design)[Short Polling, Long Polling, and WebSockets\u2014are we there yet?](/guides/system-design-interview/part-four#short-polling-long-polling-and-web-sockets-are-we-there-yet)[Conclusion](/guides/system-design-interview/part-four#conclusion)\n\n[Chapter Four](/guides/system-design-interview/part-four#chapter-four)[The fourth and final problem we will cover in Part 4 is what is commonly referred to as \u201cDesign Ticketmaster.\u201d](/guides/system-design-interview/part-four#the-fourth-and-final-problem-we-will-cover-in-part-4-is-what-is-commonly-referred-to-as-design-ticketmaster)[Solution](/guides/system-design-interview/part-four#solution)[What could possibly go wrong in the Ticketmaster system?](/guides/system-design-interview/part-four#what-could-possibly-go-wrong-in-the-ticketmaster-system)[SQL Schema Design](/guides/system-design-interview/part-four#sql-schema-design)[Exactly once seats to orders](/guides/system-design-interview/part-four#exactly-once-seats-to-orders)[Timestamps instead of cleanup jobs](/guides/system-design-interview/part-four#timestamps-instead-of-cleanup-jobs)[Keeping the payments subsystem at bay](/guides/system-design-interview/part-four#keeping-the-payments-subsystem-at-bay)[CAP, anyone?](/guides/system-design-interview/part-four#cap-anyone)[The Real-Time Part](/guides/system-design-interview/part-four#the-real-time-part)[Bonus](/guides/system-design-interview/part-four#bonus)\n\n[Part 4: Outro](/guides/system-design-interview/part-four#part-4-outro)[What\u2019s next for the team that made this guide](/guides/system-design-interview/part-four#what-s-next-for-the-team-that-made-this-guide)[interviewing.io-approved resources](/guides/system-design-interview/part-four#interviewing-io-approved-resources)\n\n1. [Learning Center](/learn)\n2. [Guides](/learn#interview-guides)\n3. System Design\n\n### Who we are\n\ninterviewing.io is your trusted advisor for every stage of your job search. In our lifetime, we've hosted close to 100k mock interviews, conducted primarily by senior engineers from FAANG. We have the recordings from these interviews, as well as feedback and outcomes, which lets us perform cool and useful analysis, like the kind in this guide. We\u2019ve also helped thousands of engineers get jobs and negotiate their salaries, and along the way we\u2019ve built a community of people dedicated to helping each other get better.\n\n[Join our community](/signup)\n\n![YouTube: Watch \"How interviewing.io Helps Engineers Land Jobs\"](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fwho-we-are-video.1fd791bd.png&w=1080&q=75)\n\nYouTube: Watch \"How interviewing.io Helps Engineers Land Jobs\"\n\n## What this guide is and whom it's for\n\nCandidates often get overwhelmed with system design. We don\u2019t blame them. There are literally hundreds of topics you can study when preparing for an interview. But does that mean that you should drop everything and go study all of them? Absolutely not. It\u2019s vital to master the basic principles first.\n\nMastering the fundamentals will go a long way in system design. When you\u2019re new to a subject, there can be diminishing returns by studying too much over a short period of time, and this can actually hurt you in a real interview. Early in your preparation, it can help to know more and have more options, but this can also cause you to feel overwhelmed by the sheer number of potential answers, possibly leading you toward overcomplicated solutions.\n\nOur experience has shown us that 80% percent of system design interviews involve only 20% of the concepts. This guide will teach you those key concepts in depth to increase your odds of excelling during an interview.\n\nOur primary audience is backend-leaning engineers who are interviewing for mid-level to senior-level roles. Whether you\u2019re new to system design interviews or you\u2019re a seasoned system design interviewer looking to refresh or hone your skills, this guide is for you.\n\n## How we made this guide\n\nWe began by listening to 30+ hours of system design interviews and system design lessons. We then performed data analysis to identify 50+ of our highest rated interviewers.\n\nCollectively, the interviewers who worked on this guide have conducted thousands of system design interviews in the wild, and we stress-tested this material by asking engineers who were new to system design to take our ideas for a spin.\n\nOur unique data set (the collective knowledge of our interviewers and our database of recorded interviews) makes us well equipped to tell you exactly what to expect in an interview. If we discuss something in this guide, it\u2019s likely to appear in 80% of mid-level / senior interviews.\n\nRead on to gain insight from the people on the other side of the table, who will give you unique access to the only thing separating you from the high-TC job you seek: the minds of your interviewers.\n\n## How to use this guide\n\n### This guide is structured into 4 parts.\n\n1. How to approach a system design interview\n2. Key topics to understand\n3. A 3-step framework to crush any system design interview\n4. Watch us design popular systems from scratch, and learn how to get unstuck\n\nNew to system design interviews? We recommend reading Parts 1-4 in order. The first two sections will introduce you to the high-level theories that will help you ease into the practical exercises and advanced strategies found in Parts 3 and 4.\n\nIf you have completed several system design interviews, feel free to begin with Part 4, which includes advanced techniques and practical tips to help you pass your interview. Afterward, you can quickly review Parts 1-3 by focusing on topics that seem helpful to you.\n\nWe created this guide because we want to provide you with a shortcut to interview success. At the same time, we don\u2019t want you to take any shortcuts in your preparation. So we\u2019ve got a bit of a paradox, because on one hand, we want to teach you the cheat codes that will help you beat the game, but on the other hand, we want you to put in the sweat equity required to learn the intricacies of system design yourself. The truth is that there are no royal roads, and a good interviewer will be able to recognize if you haven\u2019t put in the work. By reading this guide and really thinking about it, you\u2019ll learn enough to be prepared for your interview, and along the way we will provide you with a collection of tricks that will make everything easier. So here\u2019s your shortcut, but don\u2019t take any shortcuts.\n\n### Editor\u2019s note\n\nWe use the terms \u201cmachine,\u201d \u201cserver,\u201d and \u201cnode\u201d interchangeably throughout the guide.\n\n### Table of Contents\n\nThe \u201cTable of Contents,\u201d located on the left side of the screen, is designed to help you find and navigate the stuff you need. Use it. That way you can revisit conceptual sections to get a refresher and fast forward to sections you\u2019re most interested in.\n\nTo give you a heads up, it will take about 6 hours (3.5 reading and 2.5 watching videos) to consume all 4 parts of this guide. We promise those hours will be incredibly well spent!\n\n### Rule of thumb\n\nIf you have an upcoming system design interview and you're vastly unprepared, **the best thing you can do is reschedule your interview.** The bigger the company, the less they care about rescheduling.\n\nExceptions to this Rule of thumb: you have an extenuating circumstance that requires you to get a job fast (e.g., visa issues).\n\n### Legend\n\nRule of thumb\n\nQuestion\n\nAnecdote\n\nOutlaw idea \\*\n\nRemember\n\nWarning\n\nTip\n\nHow to Get Yourself Unstuck\n\n\\* Note: an \u201coutlaw idea\u201d is a divergent or controversial idea\n\n## Introduction to System Design\n\nYou may be reading this guide because you recently failed a system design interview. Or you watched a YouTube video that made system design seem like an overwhelming topic you\u2019ll never fully grasp. Or perhaps you have years of experience working in the field, yet you struggle to demonstrate your technical prowess in the brief span of a system design interview.\n\n### Do not panic!\n\n![Do not panic laptop](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fdo-not-panic.0023b194.png&w=3840&q=75)\n\n**Professional experience with distributed systems isn\u2019t needed to pass system design interviews.** And even if you do have that experience, keep in mind that many talented distributed systems engineers still struggle with the system design interview format. How you perform in an interview is not a measure of your worth as a software engineer\u2014it is a measure of your ability to do system design interviews. The two are related but not equal; being a good programmer has a surprisingly small role in passing interviews.\n\n### Anecdote\n\nOne of our experts was asked: \u201cAs an experienced engineer without any scalable systems experience, how can I go into something like a FAANG system design interview when I have never designed those systems before?\u201d Here\u2019s the expert\u2019s reply:\n\n\"I worked at Facebook for five and a half years. I learned more about system design from reading the internal interviewing wiki than I ever got from working at Facebook. They've got all kinds of distributed systems knowledge there, and it\u2019s concentrated in a handful of infrastructure teams who build really great libraries and really great backend systems. That means that the rest of us never have to think about distributed systems. We get to say, 'I'm gonna make a new data type, and if I dump a billion records in it tomorrow, it doesn't matter. The systems folks have my back.' I worked at Facebook for a really long time, but I learned almost nothing about designing systems from experience.\"\n\n### Remember\n\nYou can pass system design interviews even if you\u2019ve never designed distributed systems before. If you have copied files between machines with drag-and-drop, you are halfway there. If you implemented clients or servers or have opened network connections, you\u2019ve got this. This guide will teach you the most important 20% of information that will appear 80% of the time in system design interviews. By the end of this guide you won\u2019t be an expert, but you\u2019ll be well on your way to being a better engineer and a much better interview candidate.\n\n## The difference between engineering problems and design problems\n\n**In this excerpt taken from Design Your Life**, written by two Stanford professors and engineers, you\u2019ll get a better understanding of how different problems require different approaches. We bolded to emphasize the parts that are most important to note.\n\n\u201cThere\u2019s a difference between design problems and engineering problems... **Engineering is a good approach to solving a problem when you can get a great deal of data and you\u2019re sure there is one best solution.** Bill [one of the authors] worked on the problem of engineering the hinges on Apple\u2019s first laptops, and the solution he and his team came up with made those laptops some of the most reliable on the market. The solution required many prototypes and lots and lots of testing, similar to the design process, but the goal of creating hinges that would last five years (or opening and closing ten thousand times) was fixed, and his team tested many different mechanical solutions until they met their goal. **Once this goal was met, the solution could be reproduced millions of times. It was a good engineering problem.**\n\n\u201cCompare this with the problem of designing the first laptop that had a \u2018built in mouse\u2019. Because Apple\u2019s computers relied on the mouse to do almost everything, building a laptop that required you to be wired up to a regular mouse was unacceptable. **This was a design problem. There was no precedent to design toward, there was no fixed or predetermined outcome;** there were plenty of ideas floating around the lab, and a number of different designs were tested, but nothing was working. Then along came an engineer named Jon Krakower. Jon had been tinkering around with miniaturized trackballs, and had the crazy idea to push the keyboard to the back of the unit, leaving just enough room to squeeze in this tiny pointing device. This turned out to be the big breakthrough everyone had been looking for, and has been part of the signature look of Apple laptops ever since.\n\n\u201c**When you have a desired outcome (a truly portable laptop computer) but no clear solution in sight, that\u2019s when you brainstorm, try crazy stuff, improvise, and keep \u2018building your way forward\u2019 until you come up with something that works. You know it when you see it.** A great design comes together in a way that can\u2019t be solved with equations and spreadsheets and data analysis. It has a look and feel all of its own - a beautiful aesthetic that speaks to you.\u201d\n\n![Designing your life book image](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fdesigning-your-life.5b832608.png&w=3840&q=75)\n\nThis is one reason engineers new to system design can bomb their first couple of system design interviews spectacularly: They approach a design problem as if it\u2019s an engineering problem. There is not a single \u201cbest\u201d solution to a system design problem. There are no predetermined outcomes. The less code you write in a system design interview, the better.\n\nTo succeed in a system design interview, you want to collaborate with your interviewer, try crazy stuff, and try more crazy stuff until the design \u201cfeels right.\u201d\n\n## How approaching a system design interview is different than a coding interview\n\n**The difference between coding and system design is the difference between retrieving and creating.**\n\nInstead of finding (or \u201cretrieving\u201d) a solution, you are creating a solution. In this way, coding is akin to a science, while system design is more like an art.\n\n![Depiction of analytical left brain and creative right brain](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbrain-sides.ae49f6ed.png&w=3840&q=75)\n\nHere\u2019s another way to think about it. You aren\u2019t solving a problem\u2014you\u2019re creating a map to help someone else find the solution. Instead of coloring inside some lines, you\u2019ll need to draw the lines for someone else to color in. In a system design interview, there are no correct answers\u2014though there are certainly incorrect ones\u2014so there is nothing to solve. Instead, you\u2019ll ask questions, make stuff, and explain how and why the stuff you made was reasonable.\n\n##### Don\u2019t think like a coder. Think like a Tech Lead.\n\nDuring the interview, you\u2019ll spend an hour playing the role of a Tech Lead, so just pretend that the interviewer is a junior engineer who will be implementing your design. Juniors will have lots of questions, and since you\u2019re the Tech Lead, you want to welcome these questions.\n\n### Anecdote\n\n\u201cPretend it\u2019s 1999, so a lot of the stuff we have access to today simply doesn\u2019t exist. You and a group of your schoolmates are in your garage, hoping to make something. You're the most senior one there. You will design it and your friends will code it up, and the thing is: the Minimum Viable Product has to be completed by tomorrow. So, there\u2019s no time to prep and no need to worry about the intricacies of system architecture that you don\u2019t know. Just answer this: How would you design this system so your friends could code it up today, right now? It doesn\u2019t have to be pretty. It doesn\u2019t have to be complicated. It doesn\u2019t have to impress anyone. It just has to get done.\u201d\n\n##### What you do is important, but how you communicate is even more important.\n\nThe value of communication in coding interviews is controversial ([source](https://interviewing.io/blog/does-communication-matter-in-technical-interviewing-we-looked-at-100k-interviews-to-find-out)). But without communication in a system design interview, nothing happens. By necessity, it\u2019s more conversational in nature than a coding interview and will have more back and forth between interviewer and candidate.\n\nWith that said, sometimes you\u2019ll have an interviewer who is cold or not very collaborative. Dealing with these interviewers requires practice. The more senior you become, the more important it is to learn how to adjust your communication style to match your audience. We recommend completing mock interviews with a variety of interviewers to help you become a seasoned, fearless veteran of system design interviews.\n\n##### There are no optimal solutions in system design interviews.\n\nThere\u2019s no \u201cright\u201d way to design a system. If two experts designed the same system, you would see two different designs, beautiful and aesthetic in their own way and both as \u201ccorrect\u201d as the other (and with the accompanying justifications to support them).\n\n### Tip\n\nIn [part 2](/guides/system-design-interview/part-two), two experts will show you how they would each design the same system, providing you with a practical lesson on this topic.\n\n##### Lean towards your strengths.\n\n### Anecdote\n\n\u201cIf you want to be a great interview candidate you\u2019ve gotta know\u2026 It\u2019s your responsibility to leave breadcrumbs for the interviewer to go where you want them to go. That way you have them walk you down the road where you are at your best. And then the Jedi mind trick is to get them to think it was their idea to get you there.\u201d\n\nWhat if your measurement of success in an interview isn\u2019t what you say, but instead it\u2019s what you get the interviewer to say? Imagine you say something that engages the interviewer\u2019s curiosity so much that they have no choice but to follow up with a \u201ctell me more about that.\u201d If the areas you get them to dig into the deepest, are things you\u2019re good at: congratulations you are doing the Jedi mind trick.\n\nA candidate doing a system design interview will usually experience confusion. The interview format is so open-ended, you cannot know about everything they'll ask you. However, there will be opportunities to strut your stuff. There will be moments when they ask you about something you know very well, and when this happens put your shoulders back and flex your muscles on this topic.\n\n## What it\u2019s like to walk into a system design interview\n\nWhen beginning an interview, try to imagine what the interviewer is looking for. What are their goals for the session? How can you help them achieve those goals in a way that persuades them that you\u2019ll be a strong hire?\n\n**Put simply, the interviewer's goal is to find enough data to hire you.** Given the limited time available to them, an interviewer has to try to get enough positive signal about your ability so they can justify giving you a \u201chire\u201d rating. In one hour you have to show your interviewer that you understand the fundamentals of a system (end to end). You also should be able to name and explain (at least at a high level) each part of the system, describe the tradeoffs you make, and find a solution.\n\n### Remember\n\nThe best way to accomplish this is to imagine that you\u2019re explaining a design doc to a group of more junior engineers. They will ask you questions about your decisions and want to know what you\u2019re trying to solve. Anticipating these questions and your responses will set you up for success in the interview.\n\n![Woman helping man code](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpair-programming.ad187620.png&w=3840&q=75)\n\nWant to know exactly what a FAANG System Design interviewer looks for?\nGet detailed feedback on your system design skills from our professional\ninterviewers.\n\n[See available times](/signup)\n\n![](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fcta.47351a0d.png&w=1200&q=75)\n\n## What your interviewer looks for, and what they don't\n\nWith this basic model in mind, let's consider the main elements that system design interviewers look for, and the elements that don\u2019t matter.\n\n### What your interviewer wants to see\n\n1. a broad, base-level understanding of system design fundamentals.\n2. back-and-forth about problem constraints and parameters.\n3. well-reasoned, qualified decisions based on engineering trade-offs.\n4. the unique direction your experience and decisions take them.\n5. a holistic view of a system and its users.\n\n### What your interviewer is not looking for\n\n1. deep expertise in the given problem domain.\n2. assumptions about the prompt.\n3. specific answers with ironclad certainty.\n4. a predefined path from the beginning to end of the problem.\n5. strictly technical considerations.\n\n##### You do not need to display deep expertise in the given problem domain. Interviewers want to see that you have a broad, base-level understanding of system design fundamentals.\n\nYour interviewer will expect you to have knowledge of a wide range of basic topics, but they won't expect you to be an expert in any of them. For instance, you should understand the difference between SQL and NoSQL databases, their broad performance characteristics, and the types of applications each might be useful for (which we\u2019ll teach you later in this guide). But you would not need to know how the internals of either type of database work at any kind of detailed level.\n\nIn spite of this, you still might be asked to design those internals! Keep in mind, though, that your answer doesn't need to be optimal or reflect real-world implementations. For example, if an interviewer asks you to design a database/SQL query engine, they're not trying to discern if you're familiar with the academic literature on query engines or discover how much time you've spent working on database internals.\n\nInstead, they want to see how you would approach the problem based on what you do know, starting from first principles and collaborating with them. Your answer will probably not be anywhere near optimal, and that's OK! The interviewer will focus on the process, not the result.\n\n##### Interviewers want to engage you in a back-and-forth conversation about problem constraints and parameters, so avoid making assumptions about the prompt.\n\nInitial prompts to system design problems tend to be intentionally light on detail. Many candidates make a mistake by extrapolating details from the initial prompt and crafting a solution based on those assumptions.\n\nFor example, imagine that the interviewer instructs you to design a \"photo sharing service\" with some minimally defined capabilities. This may cause some candidates to imagine that they're rebuilding Instagram and start designing around the assumption that all images will be relatively small, not examined closely, and that extensive compression to save storage and bandwidth is acceptable.\n\nBut the interviewer didn\u2019t tell you to rebuild Instagram, so you\u2019ll need to keep in mind that there are many different types of photo sharing services. The interviewer may have had in mind something like Imgur or Photobucket, sites that cater more to basic image hosting for the web. Or they could be thinking about something like Flickr or 500px, services built for photographers to show off their work in high resolution.\n\nSo how do you figure out what type of service the interviewer wants you to build? Ask them! A basic prompt leaves room for you to start a conversation with your interviewer about the system you're designing\u2014what type of users does it serve, what type of traffic can it expect, what limits will it have? Demonstrating that you can think critically about the parameters of your service is the first step in any system design interview.\n\n##### Interviewers are not looking for specific answers with ironclad certainty. They want to see well-reasoned, qualified decisions based on engineering trade-offs.\n\nBe very careful any time you find yourself responding immediately to a prompt in a system design interview. Even aspects of your design that seem insignificant need at least cursory consideration. Let\u2019s use IDs as an example.\n\nA candidate will often start a discussion of a data model with a statement like, \"I'll use auto incrementing IDs,\" or \"I'll use GUID here\" as kind of a default approach to assigning IDs to data. In many applications, however, the type of ID you assign to your data has practical consequences.\n\nIs this ID going to be exposed to users? If so, how long does it need to be to avoid collisions? If we auto-increment it, are we worried about the visibility that will give third parties into our traffic patterns or the possibilities of users guessing the IDs to each others' data? If it's intended to be shared, is it convenient to type? If you print it on a business card or a flier, does it contain characters that you could confuse for each other (e.g., \u201c1\u201d and \u201cI\u201d, \u201c0\u201d and \u201cO\u201d)?\n\nYou don't need to hold an inquiry for every minor detail, but always be sure to give some justification for the decisions you make and let your interviewer know how your decisions would change in different circumstances. System design problems don't have a single definitive answer, so interviewers just want to see that you can justify your answers.\n\n##### Interviewers are not looking for a predefined path from the beginning to end of the problem. They want to see the unique direction your experience and decisions take them.\n\nCoding problems usually have an expected path. Typically you'll begin with an obvious but inefficient solution, and then the interviewer will prompt you for a series of improvements. Those improvements lead you to increasingly efficient solutions until you finally arrive at the optimal implementation.\n\n![Choose your own adventure books](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fchoose-your-own-adventure.3a08d61b.png&w=3840&q=75)\n\nSystem design problems, on the other hand, resemble a Choose Your Own Adventure book rather than a linear novel. A complex system contains a multitude of sub-components, each one of which could serve as a design problem on its own. After you've sketched the overall layout of your system, an interviewer may decide to keep your focus on the big picture or dive into a deeper examination of one particular component.\n\nThe path your interview takes will be steered by your interviewer, but they're likely to take cues from the sub-problems in which you display interest or aptitude. In some cases they may explicitly ask you which part of the problem you'd prefer to focus on.\n\nEven if you're not choosing directly, you can still influence an interview's direction. As you talk your way through a solution, it\u2019s OK to specifically note the parts that you have experience in and explain when you're making educated guesses. Your interviewer won't expect you to know everything, but giving them a better idea of what you do know will help them steer the interview in ways that reveal your strengths and problem-solving ability.\n\n##### Interviewers seek a holistic view of a system and its users.\n\nWhen faced with a choice in a design interview, it's easy to focus on the technical details, but remember that computer systems serve human users, so you\u2019ll want to anchor your technical decisions to the user experience they enable.\n\nSuppose, for instance, that the image sharing service you're designing will require users to log in before uploading an image. In technical terms, you might want to avoid login to keep the database schema simpler, or you could introduce login to gather better metrics. An anonymous experience may be best for a public image-hosting site intended for quick turnaround and low interaction, while a logged-in experience offers the possibility of community features like commenting and sharing, personalized metrics, and the ability to restrict an upload to authorized viewers. You may want to take either approach or even both, allowing a limited anonymous experience with extra features for logged-in users.\n\nThe important thing is to discuss the possible approaches and their consequences for the user experience with your interviewer before making a decision. You can never go wrong by making the end user the driving force in your design.\n\n![Red flag and green flag](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fred-flag-green-flag.69295f3f.png&w=3840&q=75)\n\n## Green Flags, Red Flags, and other signposts\n\nThink of red and green flags as signposts you can use to orient yourself in the interview. Green flags indicate that things are going well, that you're engaging with the interviewer and making a positive impression. Red flags warn you that you may be going astray and should try to get the interview back on track.\n\n### Red Flag #1: You believe that to pass a system design interview, you should just \u201cplay the game, keep talking, and make sure nobody explodes.\u201d\n\nFollowing this quote\u2019s advice has steered many interviewees in the wrong direction. There is no game, and talking for the sake of talking is one way to hang yourself with the rope the interviewer gives you. Also, if the goal is to not explode, well, you\u2019re wasting your and your interviewer\u2019s time.\n\n### Green Flag #1: You communicate honestly about what you know and what you don\u2019t.\n\nAs we mentioned earlier, this guide will teach you the basic information that you\u2019ll be asked about in 80% of system design interviews. Although these are great odds, you still may encounter a scenario that\u2019s beyond your level of understanding. If this happens to you, don\u2019t worry! Just engage in an honest dialogue with your interviewer, explaining when you lack certain knowledge or have gaps in your understanding. When you do have a sense of how to proceed, but you\u2019re uncertain, you should communicate from first principles. Later in this guide, we will explain how to overcome that uncertainty and still score points with your interviewer.\n\n### Red Flag #2: You find yourself pushing against interviewer feedback.\n\nKeep in mind that your interviewers use the same problems over and over again, and they frequently see candidates make the same mistakes. If they try to divert you from a course of action, it's likely because they've seen others flounder when using the same approach. You may be the one candidate in a hundred who finds a unique and better solution\u2014we've had this happen before!\u2014but carefully consider the odds before proceeding with a solution against the interviewer's advice.\n\nWith that said, there is an art to pushing back against your interviewer when the situation calls for it, and later in this guide we\u2019ll teach you how and when to employ this strategy .\n\n### Green Flag #2: The interview feels like a collaboration between you and the interviewer.\n\nWhen the interviewer offers feedback, you integrate it into your design. You ask probing questions and receive useful answers about the system you're designing, its users, and its traffic. **Try to establish a tone as if you were working through a problem with a coworker rather than proving yourself to an interviewer.** In the real world, when you\u2019re assigned a project, you\u2019ll have to ask a variety of people several questions to ensure that you fully understand the problem before making decisions. That\u2019s what interviewers want to see.\n\n### Red Flag #3: You skip over questions and ignore interviewer prompts, trying to move the interview ahead without addressing their concerns.\n\nIt's OK to not know things\u2014no one will have every answer\u2014but it's better to admit that to your interviewer than to avoid the questions altogether. Your interviewer may be able to offer you a hint or help you reason about alternatives if they know you're struggling, but if you skip right ahead you'll miss the opportunity to provide them with any positive signal from that portion.\n\n### Green Flag #3: Your role determines who should drive the focus and pace of the interview.\n\nIf you\u2019re looking for a mid-level position or below, your interviewer should determine the direction and speed of the interview. Given an initial overview of your design, they may ask you for clarification on some aspects of it. They may ask you to produce a more detailed design for one or more components. And they may also change the requirements and ask how you could adapt your solution to accommodate this new view of the world. Wherever they take the interview, follow along and focus on the areas they direct you to.\n\nIf you\u2019re applying for a senior role (or above), it\u2019s a good sign if you direct more of the interview. In junior system design interviews, the interviewer expects to drive the interview, but as you reach senior levels the expectation shifts to the interviewee.\n\n### Anecdote from a seasoned interviewer\n\n\u200b\u200bBeing overly confident and talking too much might count against a mid-level candidate. Some interviewers (especially off-script ones) love giving candidates more rope to hang themselves with, and then they ask specific questions that focus on what the candidate struggles with.\n\nIf your goal is to maximize a mid-level offer, not improve your \"average passing rate\" (i.e., if you are comfortable sacrificing some senior-plus chances to increase your mid-level chances), then you might be better off consciously \"giving control away\" to your interviewer.\n\nSimply put, at the above-senior level an awkward pause will be held against you\u2014that\u2019s basically guaranteed. But at mid-level, most of your attempts to fill in an awkward pause may hurt you more than keeping silent.\n\nAnother way to think of it: when you are not leading the conversation, you signal that you\u2019re not really far above mid-level. (But if you are comfortable at mid-level, this is not a downside!)\n\nThe saying, \u2018Better to remain silent and be thought a fool than to speak out and remove all doubt\u2019 can be true for mid-level interviews but not for seniors or above-senior.\u201d\n\n### Red Flag #4: You leave long stretches (several minutes) of silence multiple times throughout the interview.\n\nIf you're struggling to provide an answer, give yourself a little bit of time to come up with something. If you're truly stuck, however, you should ask your interviewer for help. They can't tell that you're at an impasse unless you tell them, and you may waste valuable interview time while they debate whether it's been long enough to interrupt you.\n\n### Green Flag #4: You take time to collect your thoughts and refine solutions before offering them up out loud/on the board.\n\nAn interview doesn't need to be a continuous stream of consciousness, and it never hurts to sanity check your ideas before verbalizing them.\n\n### Tip\n\nIn Part 4 of this guide, we\u2019ll teach you how to get unstuck and exactly what to say when you\u2019re stuck.\n\n![Several road signs](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Froad-signs.c32a8e36.png&w=3840&q=75)\n\n### A few more signposts\n\n##### A common failure point occurs when candidates don\u2019t make decisions\n\nOften, candidates will say things like: \u201cwe could use this type of DB, or this other, or that other, and these are some pros and cons\u2026\u201d and then they move on to another component. It\u2019s a good practice to talk about benefits and tradeoffs, but then you have to make a decision. In the real world you have to make decisions\u2014the same thing applies to the interview. If the interviewer challenges you with some questions, it\u2019s totally fine to change your mind and alter the component (if you think there are better choices).\n\n### Don\u2019t say\n\n![Thumbs down icon](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fthumbs-down.bfb29c8c.png&w=64&q=75)\n\nWe could use this type of DB, or this other, or that other, and these are some pros and cons\u2026\n\n### Do say\n\n![Thumbs up icon](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fthumbs-up.c52eadb9.png&w=64&q=75)\n\n\"We could use this type of DB, or this other, or that other, and these are some pros and cons\u2026 **And based on all these tradeoffs, I\u2019ll use THAT type of DB.**\"\n\n##### Interviewers want to identify \u201cimpostors\u201d: people who just learned a few words and try to pass the interview.\n\n**Don\u2019t say things because you think you\u2019re supposed to say them.** This often occurs when candidates name specific brands of technologies (e.g., \u201cKafka\u201d or \u201cCassandra\u201d). Not being familiar with specific databases or other components is fine. Be smart and don\u2019t say brand names just for the sake of saying them.\n\n### Don\u2019t say\n\n![Thumbs down icon](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fthumbs-down.bfb29c8c.png&w=64&q=75)\n\nI\u2019m going to use Cassandra...\u201d unless you are VERY familiar with that, because the next question will be: \u201cWhy Cassandra and not some\\_other\\_db?\n\n### Do say\n\n![Thumbs up icon](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fthumbs-up.c52eadb9.png&w=64&q=75)\n\nI\u2019m going to use a NoSQL db because of [insert brief rationale].\n\n### Don\u2019t say\n\n![Thumbs down icon](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fthumbs-down.bfb29c8c.png&w=64&q=75)\n\nI will use Kafka\u2026\u201d unless you\u2019re prepared to explain how Kafka works. Don\u2019t say \u201cI will use Kafka\u201d unless you are prepared to talk about other types of queues, because they may ask you: \u201cOh, Kafka, interesting choice. Why that instead of [some other queue]?\n\n### Do say\n\n![Thumbs up icon](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fthumbs-up.c52eadb9.png&w=64&q=75)\n\nI will use a queue because of [insert brief rationale].\n\n### Remember\n\nSay the generic name of the component, not the brand name unless you are very familiar with it. Don\u2019t say Kafka. Instead, say \u201ca queue.\n\nYou finished Part 1! We hope you gained a basic understanding of the system design interview and learned some tips and tricks you can use to excel in it. As you continue reading Parts 2-4, these \u201cglimmers\u201d of understanding will become more and more the default system of your interviewing skills.\n\nIn Part 2 we\u2019ll teach you the 15 fundamental system design concepts. You\u2019ll also get to watch our long form video of two system design experts designing the same system. They\u2019re tasked with designing interviewing.io, which in this challenge is actually three systems in one: \u201cDesign google docs, a remote compiler, and a recording service\u2026 in 30 minutes or less.\u201d\n\n[Part 2: 15 fundamental system...](/guides/system-design-interview/part-two)\n\n#### Credits\n\n###### Creator and author\n\nKevin Landucci\n\n###### Contributing authors\n\nAyush Bagla\n\nMartin Copes\n\nDima Korolev\n\nFrank (Haolun) Li\n\nMichael Mroczka\n\n###### Core consultants\n\nBruno Albuquerque\n\nAdam Bhula\n\nGrace Shea\n\n###### Technical reviewer\n\nGithire (Brian) Wahome\n\n###### Additional consultants\n\nBret Funk\n\nKyle Pacia\n\nJosh Thompson\n\n###### Editor\n\nAline Lerner\n\n###### Special thanks\n\nAll of the wonderful interviewers whom we\u2019re not allowed to name \ud83d\ude43\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.\n\n![Google Icon](/static/images/icon--google-color.svg)\n\nGet started for free\n\n![App screenshot](/_next/image?url=%2Fstatic%2Fimages%2FFooterImg.png&w=3840&q=75)\n\ninterviewing.io\n\n[Interview Replays](https://interviewing.io/mocks)\n\n[System design mock interview](https://interviewing.io/mocks/google-system-design-distributed-databases)[Google mock interview](https://interviewing.io/mocks/google-java-order-statistic-of-an-unsorted-array)[Java mock interview](https://interviewing.io/mocks/linked-in-java-reverse-word-in-string)[Python mock interview](https://interviewing.io/mocks/airbnb-python-missing-item-list-difference)[Microsoft mock interview](https://interviewing.io/mocks/microsoft-go-vertex-distance-order-statistic)\n\n[Interview Questions by Language/Company](https://interviewing.io/learn#interview-process-and-questions-by-programming-language)\n\n[Java interview questions](https://interviewing.io/java-interview-questions)[Python interview questions](https://interviewing.io/python-interview-questions)[JavaScript interview questions](https://interviewing.io/javascript-interview-questions)[Amazon interview questions](https://interviewing.io/guides/hiring-process/amazon#solutions-to-common-amazon-questions)[Google interview questions](https://interviewing.io/guides/hiring-process/google#solutions-to-common-google-questions)[Meta interview questions](https://interviewing.io/guides/hiring-process/meta-facebook#solutions-to-common-facebook-questions)[Apple interview questions](https://interviewing.io/guides/hiring-process/apple#solutions-to-common-apple-questions)[Netflix interview questions](https://interviewing.io/guides/hiring-process/netflix#solutions-to-common-netflix-questions)[Microsoft interview questions](https://interviewing.io/guides/hiring-process/microsoft#solutions-to-common-microsoft-questions)\n\n[Popular Interview Questions](https://interviewing.io/questions)\n\n[Reverse string](https://interviewing.io/questions/reverse-string)[Longest substring without repeating characters](https://interviewing.io/questions/longest-substring-without-repeating-characters)[Longest common subsequence](https://interviewing.io/questions/longest-common-subsequence)[Container with most water](https://interviewing.io/questions/container-with-most-water)[Reverse linked list](https://interviewing.io/questions/reverse-linked-list)[K closest points to origin](https://interviewing.io/questions/k-closest-points-to-origin)[Kth smallest element](https://interviewing.io/questions/kth-smallest-element)[Reverse words in a string](https://interviewing.io/questions/reverse-words-in-a-string)\n\n[Guides](https://interviewing.io/learn#interview-guides)\n\n[Amazon Leadership Principles](https://interviewing.io/guides/amazon-leadership-principles)[System Design Interview Guide](https://interviewing.io/guides/system-design-interview)[FAANG Hiring Process Guide](https://interviewing.io/guides/hiring-process)\n\nCompany\n\n[For engineers](https://interviewing.io/)[For employers](https://interviewing.io/employers)[Blog](https://interviewing.io/blog)[Press](https://interviewing.io/employers#press)[FAQ](https://interviewing.io/faq)[Security](https://interviewing.io/.well-known/security.txt)[Log in](https://start.interviewing.io/login)\n\n[![interviewing.io](/static/images/icon--linkedin-grey.svg)](https://www.linkedin.com/company/interviewing-io)[![interviewing.io](/static/images/icon--twitter.svg)](https://twitter.com/interviewingio)[![interviewing.io](/static/images/icon--youtube.svg)](https://www.youtube.com/c/interviewingio)\n\n\u00a92025 Interviewing.io Inc. Made with <3 in San Francisco.\n\n[Privacy Policy](https://interviewing.io/privacy)[Terms of Service](https://interviewing.io/terms)",
      "images": []
    },
    {
      "url": "https://interviewing.io/guides/hiring-process",
      "raw_content": "A Senior Engineer\u2019s Guide to FAANG Interviews\n\nWe helped write the sequel to \"Cracking the Coding Interview\". [Read 9 chapters for free \u2192](https://bctci.co/free-chapters)\n\n[interviewing.io](/)\n\nOpen menu\n\nInterview resources\n\n- [For employers](https://interviewing.io/employers)\n- [Gift mock interviews](https://interviewing.io/gift-practice-interviews)\n- [Blog](https://interviewing.io/blog)\n- [FAQ](https://interviewing.io/faq)\n- [Log in](https://start.interviewing.io/login)\n[Give it a try](https://interviewing.io/signup)\n\n# Ultimate Guide to FAANG Interviews for Senior Engineers\n\n## Part 1: Similarities, Differences, and Chaos\n\n~20 minute read\n\n#### Table of Contents\n\n[Introduction to FAANG interviews](/guides/hiring-process#introduction-to-faang-interviews)\n\n[About this guide](/guides/hiring-process#about-this-guide)\n\n[3 tips for FAANG interview success](/guides/hiring-process#3-tips-for-faang-interview-success)\n\n#### Part 1: Differences between the FAANGs\n\n[The Chaos Score](/guides/hiring-process#the-chaos-score)[How we calculated the Chaos Score for each company](/guides/hiring-process#how-we-calculated-the-chaos-score-for-each-company)[Deep dive into the FAANG Chaos Scores](/guides/hiring-process#deep-dive-into-the-faang-chaos-scores)\n\n[Which FAANGs let you interview with different teams simultaneously?](/guides/hiring-process#which-faangs-let-you-interview-with-different-teams-simultaneously)\n\n#### Part 2: A guide to each FAANG company\u2019s interview process\n\n[Meta](/guides/hiring-process/meta-facebook#meta)\n\n[Amazon](/guides/hiring-process/amazon#amazon)\n\n[Apple](/guides/hiring-process/apple#apple)\n\n[Netflix](/guides/hiring-process/netflix#netflix)\n\n[Google](/guides/hiring-process/google#google)\n\n[Microsoft](/guides/hiring-process/microsoft#microsoft)\n\n[Conclusion](/guides/hiring-process/conclusion#conclusion)\n\n1. [Learning Center](/learn)\n2. [Guides](/learn#interview-guides)\n3. FAANG Interviews\n\nThere are lots of guides out there to FAANG interview processes. **This one is the most thorough and the most detailed because it\u2019s the only one made *by interviewers for candidates* \u2013 we spent hundreds of hours talking to dozens of current and former FAANG interviewers about their processes**. Throughout this guide, you\u2019ll see a bunch of direct quotes from these interviewers, where they describe the idiosyncrasies of each company\u2019s process and bar in their own words. We\u2019re fortunate to have them in the interviewing.io community, and we\u2019re lucky that we can collaborate with them on this type of content. As you can imagine, they all requested to stay anonymous, but we want to thank them here, first and foremost.\n\n## Introduction to FAANG interviews\n\n![Introduction to FAANG interviews](/_next/image?url=%2Fstatic%2Fimages%2Fguides%2Fhiring-process%2Fdont-panic.png&w=3840&q=75)\n\nFAANG interviews are a gauntlet, but you can pass them even if you doubt yourself \u2013 interviewing is easier once you learn a company\u2019s operating metaphor. George Lakoff (neuroscience and artificial Intelligence researcher) says that every human organization has a metaphor they operate as. If you ask an employee at a FAANG company about their metaphor, you\u2019ll probably receive a blank stare in return. But if you look at the interviewing data of that same FAANG company, the metaphors jump out of the data set like bread out of a toaster.\n\nThis guide will walk you through all the FAANGs\u2019 metaphors and the unwritten codes of those metaphors: what they reward, what they punish, and what they\u2019re blind to. To show them you\u2019re obviously a part of their tribe, model their metaphors and unwritten codes.\n\nMetaphors aside, this guide will also walk you through the unglamorous logistics of every FAANG\u2019s interview process so that you know how many steps there are, what those steps entail, and what kinds of questions they ask. Our goal is to have you walk in and be completely unfazed by the proceedings because you\u2019re expecting them.\n\nOf course, even with all the insider info in the world, if you\u2019re not prepared for technical interviews, you will fail, so we\u2019d be remiss if we didn\u2019t share some useful insights about practice to help you on your journey.\n\n## About this guide\n\nThere are 3 steps to getting a strong offer at FAANG.\n\n- Step 1: Get Interview.\n- Step 2: Do Interview.\n- Step 3: Negotiate.\n\nSteps 1 and 3 are out of scope for this post, which is solely focused on Step 2.\n\nMoreover, this guide is written for experienced, back-end leaning engineers \u2013 interview processes are usually different for juniors, but we won\u2019t be getting into those differences. Finally, we won\u2019t be getting into the differences in process for front-end engineers, SREs, etc. That said, if you\u2019re targeting those roles, you\u2019ll still get value out of this guide.\n\nIn Part 1 of this guide, we\u2019ll highlight key similarities and differences between the FAANG companies, namely:\n\n- Meta\n- Apple\n- Amazon\n- Netflix\n- Google\n- Microsoft (they\u2019re not officially FAANG, but we\u2019re including them anyway \u2013 from now on, when we say \u201cFAANG\u201d, we mean Microsoft as well)\n\nIn Part 2, we\u2019ll go through each company one by one and tell you how each of their processes work and how to prepare for each one.\n\nIf you\u2019re planning on interviewing with multiple FAANGS, we recommend reading Part 1 first. If you'd prefer to skip straight to a company\u2019s individual guide then just click on it in the table of contents to the left! Individual guides include more detailed information on company-specific coding interviews, behavioral interviews, and anecdotes from actual interview experiences.\n\nAll of these big tech companies share grueling interview processes, strong initial compensation packages, and above average benefits. They compete with each other for the same engineers. If tech has a food chain, they\u2019re at the top. Most other tech companies copy or are influenced by what FAANG does.\n\nThere are also a number of myths about FAANG interview processes. Two big ones are that Amazon has the lowest bar, and Google has the highest bar. That\u2019s not true; we have the data. The reality is that all of their bars are different. It\u2019s not a linear comparison. It\u2019s a multidimensional comparison. Because of that, it\u2019s impossible to say something like, \u201cThe entire process at Google is harder than the entire process at Amazon.\u201d They\u2019re simply different processes.\n\n#### Anecdote from a Facebook Interviewer\n\n\u201cMy friend interviewed at Google and Facebook, and he passed both loops. At Google, he was offered L6. At Facebook, he was offered L4. Speaking about luck: this is the same person with the same experience. And the level of difference\u2013 at two of the most trusted names in tech\u2013was two levels of seniority.\n\nAnd one common idea in big tech is that Google\u2019s process is easier than Facebook\u2019s. But you can see here: it really depends. After all, this person accepted the L4 role at Facebook because the compensation package was bigger than the role at Google for L6.\u201d\n\nLong story short: it\u2019s complicated. That\u2019s exactly why we wrote this guide: to demystify the differences, to decouple the 6-headed monster, and to demonstrate how to attack each head, one at a time.\n\n## 3 tips for FAANG interview success\n\nThis is the ultimate insider\u2019s guide to tech interviews at FAANG. However, even with all the insider info in the world, if you\u2019re not prepared for technical interviews, you will fail, so we\u2019d be remiss if we didn\u2019t share some useful insights about practice to help you on your journey. Yes, we know we\u2019re a practice platform, and, look, you don\u2019t have to practice with us. But you should practice! Here\u2019s why.\n\n### 1. Do five practice interviews\n\nThree different startups with robust data sets on software engineering interviews found eerily similar data points about what happens after you do five technical interviews. I worked at all three companies and saw this data myself.\n\n- In a previous article about [how to know when you're ready to interview at FAANG](https://interviewing.io/blog/how-know-ready-interview-faang) we shared that completing 5 technical interviews (mock interviews or real) doubles your chances of passing a subsequent technical interview.\n- Triplebyte found that the chances of getting *at least 1 offer* increases with each onsite you do, up until 5 onsites. For each onsite completed after the 5th, your chances of getting an offer level off at 80-85%.\n- Pathrise found that most of their engineers failed 4-5 onsites before they got an offer.\n\nMind you, these datasets were quite different: Triplebyte skewed towards folks with nontraditional backgrounds, interviewing.io inclined towards senior backend engineers, and Pathrise was mainly junior engineers. Despite that, the number five emerged across these data sets, and it\u2019s clear that something happens after you complete five technical interviews. We can\u2019t explain what yet. But the data is screaming in all caps: there is a there *there*. One more anecdotal point: these five interviews should ideally mimic the real thing as much as possible. For instance, if you want a FAANG job, but your five interviews are with startups that don\u2019t ask algorithmic questions, you won\u2019t get as much value. The more your practice can simulate the real game, the better.\n\n### 2. If you\u2019re unprepared, it\u2019s OK to reschedule\n\nIf you\u2019re unprepared for a FAANG interview, ask to reschedule. **Not rescheduling is the number one mistake we see our users make!** Getting an interview tomorrow (as opposed to 1-3 months from tomorrow) is, in most cases, no different to the company\u2026 but very different to you \u2013 if you fail, you might get frozen out for months. In the rare cases where rescheduling could hurt your chances because it\u2019s a specific role for a specific team, your recruiter will tell you that. Either way, there\u2019s no harm in asking.\n\n### 3. A note about recruiter calls\n\nRecruiter calls don\u2019t differ much from FAANG company to FAANG company, so we decided to put everything about what to expect in a recruiter call in one place. If a recruiter call ever meaningfully deviates from this format, we\u2019ll mention it. Otherwise, expect that it doesn\u2019t.\n\nA recruiter call is the first step of almost every process. In this call, a recruiter will ask you about your past experience, your salary expectations, and why you\u2019re interested in that particular company. They will also ask you about your timeline (how soon you expect to accept an offer), how far along you are with other companies, whether you have outstanding offers, and so on.\n\nIn this call, it\u2019s important to be able to succinctly talk about your past few positions, your major contributions at those positions (what did you do individually versus what did your team do) and their impact on the business. Remember that most recruiters don\u2019t have a technical background and they\u2019re not software developers, so it\u2019s important to be able to describe your technical contributions in clear layman\u2019s terms.\n\nIt\u2019s also really important, at this stage, not to reveal your salary expectations, your salary history, or where you are in the process with other companies. We wrote a detailed [post about salary negotiation](https://interviewing.io/blog/negotiate-salary-recruiter) that lays out exactly what to say when recruiters pressure you to name the first number. Just don\u2019t do it \u2013 when you give out information this early in the process, you\u2019re painting future you into a corner.\n\n# Part 1. Differences between the FAANGs\n\n## The Chaos Score\n\nThis section will give you a feel for how these companies\u2019 processes differ. For now, don\u2019t worry about how that translates into interview prep \u2013 we\u2019ll cover that later when we describe how to prepare for each company.\n\nTake a look at the chart below. In it, we rank the FAANGs on their \u201cChaos Score\u201d. The more points a company has, the more chaotic they are.\n\nIn this context, we define \u201cchaos\u201d as the level of uncertainty and unpredictability that candidates can expect from the interview process and its outcomes. If a company consistently follows the same process, asks the same questions, and thoroughly trains their interviewers, they are not chaotic. If their process is completely non-standard, non-deterministic and subjective, they are chaotic.\n\n| Company Name | Chaos Score |\n| --- | --- |\n| Apple | 20 |\n| Netflix | 20 |\n| Microsoft | 18 |\n| Amazon | 12 |\n| Google | 10 |\n| Meta | 3 |\n\nAs you can see, Apple and Netflix win the award for the most chaotic interview processes in FAANG. Microsoft gets 2nd place. Amazon gets 3rd, Google 4th, and Facebook 5th.\n\nChaos can be pain or pleasure depending on your tolerance for uncertainty. Chaos can also either impose a terrible detriment or prove a huge advantage in interviews specifically. For instance, candidates who have spent a long time grinding on LeetCode might prefer less chaotic companies. More chaotic companies can work for candidates for a few reasons: a) niche skill sets can be an easier match for niche interview processes, b) practical interviews are more likely, and c) the interview process shows them how the team they\u2019d be joining actually operates.\n\n### How we calculated the Chaos Score for each company\n\nTo calculate each company\u2019s Chaos Score, we picked four categories and graded each company on a 0 to 5 point scale in each category, where 5 means most chaotic and 0 means least.\n\n1. The \u201cnorth star\u201d of their decision-making process (do they care more about \u201cWhat\u201d, \u201cWhy\u201d, or \u201cHow\u201d?)\n2. If they have the same interviews company-wide or if the interview changes depending on the team with which you\u2019re interviewing\n3. How much they train their interviewers\n4. How much they standardize their interview questions\n\nWe added up the points for each company, with a maximum possible Chaos Score of 20.\n\n### Deep dive into the FAANG Chaos Scores\n\n|  | North star | Team dependent process? | Level of training for interviewers? | Level of standardization? |\n| --- | --- | --- | --- | --- |\n| Apple | Why (5) | Yes (5) | None (5) | None (5) |\n| Netflix | Why (5) | Yes (5) | None (5) | None (5) |\n| Microsoft | How (3) | Yes (5) | None (5) | None (5) |\n| Amazon | What (1) | Yes (5) | High (2) | Low (4) |\n| Google | How (3) | No (0) | Medium (3) | Low (4) |\n| Facebook | What (1) | No (0) | Highest (1) | Highest (1) |\nThe more points a company has for each category, the more chaotic they are.\n\n#### The north star: \u201cWhat\u201d, \u201cWhy\u201d, and \u201cHow\u201d companies\n\nBy \u201cNorth star\u201d, we mean what a given company values most. As such, we grouped companies into 3 buckets: companies who primarily care about \"Why\", \"How\", and \"What\".\n\n\u201cWhy\u201d is the most chaotic because judging motivations is the most subjective approach. \u201cHow\u201d is the second most chaotic because judging thought processes is the second most subjective. \u201cWhat\u201d is the least chaotic because judging end results is the least subjective method.\n\n\u201cWhy\u201d companies can\u2019t agree on what a good \u201cwhy\u201d looks like because it\u2019s a \u201cgut feel / friend test\u201d. Whom you consider to be a friend and who gives you a good gut feeling isn\u2019t quantifiable. It\u2019s completely subjective. \u201cWhy\u201d companies are the most prone to bias. If you speak their language and model the behaviors they encourage, you\u2019ll seem like a friend and give them a good gut feel. If you don\u2019t, then you won\u2019t.\n\nIf chaos is hell, then \u201cWhy\u201d companies are raising hell for candidates and themselves.\n\n\u201cHow\u201d companies mainly care about your thought process: *Okay, you didn\u2019t get to the optimal solution, but what was the journey like*? Google and Microsoft repeat this mantra again and again \u2013 they want to know how you think. You might get asked a really hard or specific question, but they don\u2019t necessarily require an optimal answer to pass. They put far more weight on your ability to demonstrate a solid thought process.\n\n\u201cWhat\u201d companies mainly care about your results, such as: *Did you get to the optimal solution*? Facebook and Amazon want you to get there, and fast. \u201cWhat\u201d is the most straightforward for candidates: simply get results as quickly as possible.\n\n#### Team-dependent process\n\nA Google or Facebook interview doesn\u2019t change depending on the team you\u2019re interviewing for. Both companies have one big, centralized interview process that\u2019s completely divorced from which team you might end up on. If you do well in the team-agnostic process, there will be a team matching component after the onsite. You will NOT, however, be interviewing with your future coworkers.\n\n(Note: Google is rumored to be changing to a team-dependent process, but we\u2019ll leave that where it is for now.)\n\nAt Microsoft, Netflix, Apple, and Amazon, the process is team-dependent. You\u2019ll not only be interviewing with the people that you\u2019ll be working with, but there\u2019s more chaos. Each team defines how they do things: the types of questions asked, the types of interview rounds, and even how they make hiring decisions.\n\nTeam-dependent processes are more challenging in the sense that *you're more likely to get blind-sided*; because each team has a different process, candidates are more likely to prep for X and get (a significantly different) Y.\n\nYet, team-independent processes are more challenging *because of the machinery*. Your interviewers are so far removed from you. That detachment affects how they treat, judge, and talk about you.\n\n**Think of it like this: At Netflix, Apple, Amazon, and Microsoft you\u2019re interviewing with humans. At Google and Facebook, you\u2019re interviewing with a machine.**\n\n#### Interviewer training\n\nFacebook is the least chaotic company in this category because they have the most in-depth interviewer training in FAANG. Their process is rigorous and selective. Though most would-be interviewers pass within 6 months, some people who try never pass the bar to become an interviewer. Facebook is the only FAANG where this is true.\n\nFacebook and Amazon put interviewer candidates through roughly the same things, but Facebook is more rigorous. For example, both will have similar modules interviewers go through in training. A module at Amazon is more likely to be a box to check: if you do it, you pass. At Facebook, you don\u2019t pass simply for doing it: you pass by meeting a predetermined bar. Also, Facebook modules are more likely to have a rubric.\n\nGoogle used to have a more in-depth interviewer training process than what they have now. For whatever reason, they began to skimp on their interviewer training roughly sometime in the 2010s. Now, Googlers can get a bit of training, but usually not as much as folks at Facebook or Amazon.\n\nNetflix, Microsoft, and Apple do not train their interviewers; certain teams may be exceptions but there\u2019s no company-wide required interview training. The day you start, you can start interviewing. That makes them the most chaotic in this category.\n\n**What this means for candidates is that the less training they put their interviewers through, the more likely you\u2019ll have a bad interviewer. As the old saying goes: \u201cPrepare for the worst, pray for the best.\u201d**\n\n#### Interview question standardization\n\nCompanies that standardize their interview questions give interviewers less free reign; groups with no standardization have more free reign. At all companies, there will be interviewers who go rogue and deviate from the norm. Yet, each company has a norm.\n\nFacebook wins again for being the least chaotic/most predictable. In behavioral rounds, interviewers at Facebook can ask whatever behavioral questions they want. However, in technical rounds, they can only ask pre-approved coding questions. They can also modify pre-approved coding challenges. That\u2019s it.\n\nGoogle is tied for the second least chaotic here; their interviewers have free reign in technical rounds. They have a large technical question bank, yet interviewers routinely make up their own ambiguous one-of-a-kind questions. In behavioral rounds, they can only ask or modify pre-approved questions.\n\nAmazon is tied for second least chaotic, but for a different reason. Technically, there\u2019s no standardization for any round (technical or behavioral). They do, however, tend to repeat questions from their internal question bank (which is not required for interviewers to use.)\n\nMicrosoft, Apple, and Netflix are the most chaotic companies. Each team decides what to ask. Questions tend to be customized to the hiring manager\u2019s preferences, a senior individual contributor\u2019s diligence, what this team works on day-to-day, or the specific domain this team is in.\n\n## Which FAANGs let you interview with different teams simultaneously?\n\nWhether you get one shot or unlimited shots to land an offer changes how you prepare. Here\u2019s the breakdown of which companies let you interview with multiple teams concurrently.\n\n| Company Name | Can interview with different teams concurrently? |\n| --- | --- |\n| Apple | Yes |\n| Netflix | Yes |\n| Microsoft | Yes |\n| Amazon | Yes |\n| Google | No |\n| Meta | No |\n\nIf you can interview with multiple teams concurrently, then they don\u2019t have a cool down period. So, after you fail, you don\u2019t need to wait at all to reinterview. Two of the biggest players only give you one shot to win, and at the remaining four your chances are unlimited.\n\n**Because their interview process is centralized, Google and Facebook are the only ones well-organized enough to not let candidates \u201cdouble dip\u201d.**\n\n#### Tip to get unstuck\n\nIf you really want a job at Netflix, Apple, Amazon, or Microsoft: stack the odds of landing your dream job in your favor and interview with multiple teams. There\u2019s no cool-down period, so if you get rejected from Team A, you can interview with Team B tomorrow.\n\nIn Part 2, we\u2019ll give you a deeper feel for each company, and we\u2019ll tell you what to do about it. Each company has its own section, and each section is organized into five subsections:\n\n1. Interview process (including what to expect in the recruiter call and the phone screen)\n2. What to expect in your interviews\n3. How they make hiring decisions\n4. Interview preparation resources\n\n[Meta](/guides/hiring-process/meta-facebook)\n\n#### Credits\n\n###### Creator and author\n\nKevin Landucci\n\n###### Editor\n\nAline Lerner\n\n###### Special thanks\n\nAll of the wonderful interviewers whom we\u2019re not allowed to name \ud83d\ude43\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.\n\n![Google Icon](/static/images/icon--google-color.svg)\n\nGet started for free\n\n![App screenshot](/_next/image?url=%2Fstatic%2Fimages%2FFooterImg.png&w=3840&q=75)\n\ninterviewing.io\n\n[Interview Replays](https://interviewing.io/mocks)\n\n[System design mock interview](https://interviewing.io/mocks/google-system-design-distributed-databases)[Google mock interview](https://interviewing.io/mocks/google-java-order-statistic-of-an-unsorted-array)[Java mock interview](https://interviewing.io/mocks/linked-in-java-reverse-word-in-string)[Python mock interview](https://interviewing.io/mocks/airbnb-python-missing-item-list-difference)[Microsoft mock interview](https://interviewing.io/mocks/microsoft-go-vertex-distance-order-statistic)\n\n[Interview Questions by Language/Company](https://interviewing.io/learn#interview-process-and-questions-by-programming-language)\n\n[Java interview questions](https://interviewing.io/java-interview-questions)[Python interview questions](https://interviewing.io/python-interview-questions)[JavaScript interview questions](https://interviewing.io/javascript-interview-questions)[Amazon interview questions](https://interviewing.io/guides/hiring-process/amazon#solutions-to-common-amazon-questions)[Google interview questions](https://interviewing.io/guides/hiring-process/google#solutions-to-common-google-questions)[Meta interview questions](https://interviewing.io/guides/hiring-process/meta-facebook#solutions-to-common-facebook-questions)[Apple interview questions](https://interviewing.io/guides/hiring-process/apple#solutions-to-common-apple-questions)[Netflix interview questions](https://interviewing.io/guides/hiring-process/netflix#solutions-to-common-netflix-questions)[Microsoft interview questions](https://interviewing.io/guides/hiring-process/microsoft#solutions-to-common-microsoft-questions)\n\n[Popular Interview Questions](https://interviewing.io/questions)\n\n[Reverse string](https://interviewing.io/questions/reverse-string)[Longest substring without repeating characters](https://interviewing.io/questions/longest-substring-without-repeating-characters)[Longest common subsequence](https://interviewing.io/questions/longest-common-subsequence)[Container with most water](https://interviewing.io/questions/container-with-most-water)[Reverse linked list](https://interviewing.io/questions/reverse-linked-list)[K closest points to origin](https://interviewing.io/questions/k-closest-points-to-origin)[Kth smallest element](https://interviewing.io/questions/kth-smallest-element)[Reverse words in a string](https://interviewing.io/questions/reverse-words-in-a-string)\n\n[Guides](https://interviewing.io/learn#interview-guides)\n\n[Amazon Leadership Principles](https://interviewing.io/guides/amazon-leadership-principles)[System Design Interview Guide](https://interviewing.io/guides/system-design-interview)[FAANG Hiring Process Guide](https://interviewing.io/guides/hiring-process)\n\nCompany\n\n[For engineers](https://interviewing.io/)[For employers](https://interviewing.io/employers)[Blog](https://interviewing.io/blog)[Press](https://interviewing.io/employers#press)[FAQ](https://interviewing.io/faq)[Security](https://interviewing.io/.well-known/security.txt)[Log in](https://start.interviewing.io/login)\n\n[![interviewing.io](/static/images/icon--linkedin-grey.svg)](https://www.linkedin.com/company/interviewing-io)[![interviewing.io](/static/images/icon--twitter.svg)](https://twitter.com/interviewingio)[![interviewing.io](/static/images/icon--youtube.svg)](https://www.youtube.com/c/interviewingio)\n\n\u00a92025 Interviewing.io Inc. Made with <3 in San Francisco.\n\n[Privacy Policy](https://interviewing.io/privacy)[Terms of Service](https://interviewing.io/terms)",
      "images": []
    }
  ]
}